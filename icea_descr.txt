K√©sz√≠ts√ºnk egy Laravel Web API-t, amely:

√∫j irodab√©rl√©seket r√∂gz√≠t,

megl√©v≈ë b√©rl√©seket lek√©rdez (egy vagy t√∂bb),

b√©rl√©seket t√∂r√∂l.

üì¶ Adatt√°bl√°k
users: felhaszn√°l√≥k (csak az azonos√≠t√≥juk sz√ºks√©ges egyel≈ëre)

offices: irod√°k (csak az azonos√≠t√≥juk sz√ºks√©ges egyel≈ëre)

rentals: a b√©rl√©sek adatai (ez a f≈ë t√°bla)

üìÑ B√©rl√©s mez≈ëk:
Mez≈ën√©v	T√≠pus	Le√≠r√°s
id	int	Egyedi azonos√≠t√≥ (kulcs)
uid	int	A b√©rl≈ë felhaszn√°l√≥ ID-ja
officeId	int	A b√©relt iroda ID-ja
startDate	DateTime	B√©rl√©s kezdete
endDate	DateTime	B√©rl√©s v√©ge
dailyRate	int	Napi d√≠j (‚Ç¨)
baseFee	int	Alapd√≠j (‚Ç¨)
totalPrice	-	Sz√°molt √©rt√©k, nem ker√ºl adatb√°zisba (NotMapped)

üéØ API v√©gpontok
GET /api/berlesek ‚Äì √∂sszes b√©rl√©s

GET /api/berlesek/{id} ‚Äì adott b√©rl√©s

POST /api/berlesek ‚Äì √∫j b√©rl√©s r√∂gz√≠t√©se (√ºzleti szab√°lyokkal)

DELETE /api/berlesek/{id} ‚Äì b√©rl√©s t√∂rl√©se

‚ö†Ô∏è √úzleti szab√°lyok √∫j b√©rl√©shez (POST):
Kezd≈ënap ‚â• holnapi nap

B√©rl√©s hossza ‚â• 5 nap

B√©rl√©s hossza ‚â§ 90 nap

Az adott irod√°t nem lehet p√°rhuzamosan k√©tszer lefoglalni



1. composer create-project laravel/laravel office-sphere-api

2. .env
DB_CONNECTION=mysql
# DB_HOST=127.0.0.1
# DB_PORT=3306
# DB_DATABASE=office_sphare
# DB_USERNAME=root
# DB_PASSWORD=

3. Gener√°l egy titkos kulcsot (APP_KEY)

php artisan key:generate

4.Els≈ëk√©nt hozzuk l√©tre a rentals t√°bl√°t.

php artisan make:migration create_rentals_table

***
public function up()
{
    Schema::create('rentals', function (Blueprint $table) {
        $table->id(); // id (PK)
        $table->unsignedBigInteger('uid'); // felhaszn√°l√≥ azonos√≠t√≥ja
        $table->unsignedBigInteger('office_id'); // iroda azonos√≠t√≥
        $table->date('start_date');
        $table->date('end_date');
        $table->integer('daily_rate');
        $table->integer('base_fee');
        $table->timestamps();
    });
}
***
5.php artisan migrate

6.php artisan make:model Rental

7. Itt sz√°molhatjuk a totalPrice √©rt√©k√©t
***
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Casts\Attribute;

class Rental extends Model
{
   protected $fillable = [
        'uid',
        'office_id',
        'start_date',   
        'end_date',
        'daily_rate',
        'base_fee',
    ];

    protected $appends = [
        'total_price',
    ];

   // totalPrice = base_fee + dailyRate * napok sz√°ma
    protected function totalPrice(): Attribute
    {
        return Attribute::make(
            get: function () {
                $days = $this->start_date->diffInDays($this->end_date);
                return $this->base_fee + ($this->daily_rate * $days);
            },
        );
    }   
}
***
8.Routes routes/api.php ha nincs l√©trehozni
+++++++++++++ BEILLESZTENI A bootstrap/app.php-ba a +++++++++++++ api: __DIR__.'/../routes/api.php',  ++++++++++++++++
return Application::configure(basePath: dirname(__DIR__))
***
   ->withRouting(
        web: __DIR__.'/../routes/web.php',
        api: __DIR__.'/../routes/api.php',
        commands: __DIR__.'/../routes/console.php',
        health: '/up',
    )
***
____________________________________
K√©r√©s ‚Üí Route (√∫tvonal) ‚Üí Controller ‚Üí Modell ‚Üí Adatb√°zis ‚Üí V√°lasz
_______________________________________
conrollerrel:
***
use App\Http\Controllers\RentalController;

Route::get('/berlesek', [RentalController::class, 'index']);      // üîπ √ñsszes b√©rl√©s
Route::get('/berlesek/{id}', [RentalController::class, 'show']);  // üîπ Egy adott b√©rl√©s
VAGY EZ EGYSZER≈∞BB
Route::apiResource('berlesek', RentalController::class);
Route::apiResource('irodak', OfficeController::class);
***


9. CONTROLLER

php artisan make:controller RentalController

***
<?php
namespace App\Http\Controllers;
use Illuminate\Http\Request;
use App\Models\Rental;

class RentalController extends Controller
{
    public function index()
    {
        return response()->json(Rental::all());
    }
    public function show($id)
    {
        return response()->json(Rental::findOrFail($id));
    }//
}

***
10. √öJB√âRL√âS - store() met√≥dus a RentalController


Route::post('/berlesek', [RentalController::class, 'store']); VAGY

***
use Illuminate\Http\Request;
use App\Models\Rental;
use Illuminate\Support\Carbon;

public function store(Request $request)
{
    // 1Ô∏è‚É£ √ârv√©nyes√≠t√©s: ellen≈ërizz√ºk, hogy minden sz√ºks√©ges mez≈ë megvan-e √©s megfelel≈ë-e
    $validated = $request->validate([
        'uid' => 'required|integer',             // B√©rl≈ë azonos√≠t√≥ja
        'office:id' => 'required|integer',        // Iroda azonos√≠t√≥ja
        'start_date' => 'required|date',          // B√©rl√©s kezdete (d√°tumk√©nt)
        'end_date' => 'required|date',            // B√©rl√©s v√©ge (d√°tumk√©nt)
        'daily_rate' => 'required|integer|min:0', // Napi d√≠j (nem lehet negat√≠v)
        'base_fee' => 'required|integer|min:0',   // Alapd√≠j (nem lehet negat√≠v)
    ]);

    // 2Ô∏è‚É£ A d√°tumokat √°talak√≠tjuk Carbon objektumm√°, hogy tudjunk vel√ºk sz√°molni
    $start = Carbon::parse($validated['startDate']);
    $end = Carbon::parse($validated['endDate']);
    $days = $start->diffInDays($end); // K√ºl√∂nbs√©g napokban

    // 3Ô∏è‚É£ √úzleti szab√°ly: kezd≈ëd√°tum nem lehet kor√°bbi, mint holnap
    if ($start->isBefore(Carbon::tomorrow())) {
        return response()->json(['error' => 'A b√©rl√©s kezd≈ënapja nem lehet kor√°bbi, mint a holnapi nap.'], 400);
    }

    // 4Ô∏è‚É£ √úzleti szab√°ly: legal√°bb 5 napos legyen a b√©rl√©s
    if ($days < 5) {
        return response()->json(['error' => 'A b√©rl√©snek legal√°bb 5 naposnak kell lennie.'], 400);
    }

    // 5Ô∏è‚É£ √úzleti szab√°ly: legfeljebb 90 napos lehet a b√©rl√©s
    if ($days > 90) {
        return response()->json(['error' => 'A b√©rl√©s nem lehet hosszabb 90 napn√°l.'], 400);
    }

    // 6Ô∏è‚É£ Ellen≈ërizz√ºk, hogy van-e √°tfed√©s m√°sik b√©rl√©ssel ugyanarra az irod√°ra
    $overlap = Rental::where('office_id', $validated['office_id'])
        ->where(function ($query) use ($start, $end) {
            $query->whereBetween('start_date', [$start, $end]) // kezd≈ënap beleesik az id≈ëszakba
                  ->orWhereBetween('end_date', [$start, $end]) // z√°r√≥nap beleesik az id≈ëszakba
                  ->orWhere(function ($query) use ($start, $end) {
                      $query->where('start_date', '<=', $start) // lefedi az eg√©sz id≈ëszakot
                            ->where('end_date', '>=', $end);
                  });
        })->exists();

    if ($overlap) {
        // 7Ô∏è‚É£ Ha van √°tfed√©s, visszat√©r√ºnk hib√°val
        return response()->json(['error' => 'Ez az iroda m√°r foglalt a megadott id≈ëszakban.'], 400);
    }

    // 8Ô∏è‚É£ Ha minden rendben, elmentj√ºk az √∫j b√©rl√©st
    $rental = Rental::create($validated);

    // 9Ô∏è‚É£ Visszak√ºldj√ºk a mentett adatokat JSON v√°laszk√©nt
    return response()->json($rental, 201); // 201 Created st√°tusz
}

***

11. DELETE

Route::delete('/berlesek/{id}', [RentalController::class, 'destroy']); VAGY

***
public function destroy($id)
{
    // 1Ô∏è‚É£ Megkeress√ºk a b√©rl√©st az ID alapj√°n, vagy 404-es hib√°t dobunk, ha nincs ilyen
    $rental = Rental::findOrFail($id);

    // 2Ô∏è‚É£ T√∂r√∂lj√ºk az adatb√°zisb√≥l
    $rental->delete();

    // 3Ô∏è‚É£ Visszajelz√©s: nincs tartalom, de sikeres t√∂rl√©s (204 No Content)
    return response()->json(null, 204);
}


***







